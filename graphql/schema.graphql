### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  first_name: String
  id: String
  is_default: Boolean
  last_name: String
  location: Location
  mobile_phone_number: String
  specific_address: String
  user: User
}

type Cart {
  id: String
  items: [CartItem]
  sessionId: String
  user: User
}

type CartItem {
  cartId: String
  id: String
  product: Product
  productTotal: Int
  quantity: Int
  sessionId: String
}

type Category {
  category: String
  id: String
}

type County {
  county: String
  towns: [Town]
}

type Edge {
  cursor: String
  node: Product
}

type Location {
  addresses: [Address]
  county: String
  id: String
  name: String
  shipping: Int
  town: String
}

type Mutation {
  addFavorite(id: String!): Product!
  addToCart(id: String!): Cart!
  createAddress(firstName: String!, lastName: String!, location: String!, phoneNumber: String!, specificAddress: String!): Address!
  createOrder(amountPayable: Int!, cartTotal: Int!, checkoutrequestid: String!, mpesaNumber: String!, products: [String]!, shippingCost: Int!): Order!
  createProduct(category: String!, image: String!, name: String!, price: Int!, price_type: String!, stock: Int!): Product!
  decreaseQuantity(id: String!): CartItem
  deleteAddress(id: String): Address!
  deleteFavorite(id: String): Product!
  increaseQuantity(id: String!): CartItem!
  removeFromCart(id: String!): CartItem
}

type Order {
  amount_payable: Int
  cart_total: Int
  checkoutrequestid: String
  id: String
  is_shipped: Boolean
  mpesa_number: String
  payment: Stk
  products: [Product]
  shipping_cost: Int
  status: OrderStatus
  user: User
}

enum OrderStatus {
  FAILED
  PAID
  PENDING
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Product {
  category: String
  id: String
  image: String
  name: String
  price: Int
  price_type: String
  stock: Int
  users: [User]
}

type Query {
  addresses: [Address]!
  cart: Cart!
  cartCount: Int!
  cartTotal: Int!
  categories: [Category]!
  counties: [County]!
  getAllUsers: [User]!
  getProductsByCategory(after: String, category: String, first: Int): Response
  order(id: String!): Order!
  products(after: String, first: Int): Response
}

type Response {
  edges: [Edge]
  pageInfo: PageInfo
}

enum Role {
  ADMIN
  USER
}

type Stk {
  checkoutrequestid: String
  id: String
  merchantrequestid: String
  order: Order
  resultcode: Int
  resultdesc: String
}

type Town {
  id: String
  town: String
}

type User {
  addresses: [Address]
  email: String
  favorites: [Product]
  id: String
  image: String
  name: String
  orders: [Order]
  role: Role
}