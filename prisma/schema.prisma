datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id         String     @id @default(uuid())
  index      Int        @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String     @unique
  price      Int
  price_type String
  category   String
  stock      Int
  image      String
  users      User[]
  CartItem   CartItem[]
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  session   Session    @relation(fields: [sessionId], references: [sessionId])
  sessionId String     @unique
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?
}

model Session {
  id         String       @id @default(uuid())
  sessionId  String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  user       User?        @relation(fields: [userId], references: [id])
  userId     String?      @unique
  cart       Cart?
  cartId     String?
  StkRequest StkRequest[]
}

model User {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  role       Role         @default(USER)
  email      String       @unique
  image      String?
  favorites  Product[]
  addresses  Address[]
  orders     Order[]
  cart       Cart?
  session    Session?
  StkRequest StkRequest[]
}

enum Role {
  USER
  ADMIN
}

model Address {
  id                     String       @id @default(uuid())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  first_name             String
  last_name              String
  mobile_phone_number    String
  alternate_phone_number String?
  specific_address       String
  is_default             Boolean      @default(false)
  User                   User         @relation(fields: [userId], references: [id])
  userId                 String
  Location               Location     @relation(fields: [locationId], references: [id])
  locationId             String
  Orders                 Order[]
  StkRequest             StkRequest[]
}

model Location {
  id        String    @id @default(uuid())
  index     Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  shipping  Int
  county    String
  town      String
  addresses Address[]
}

model Order {
  id                String         @id @default(uuid())
  index             Int            @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deliveryStart     DateTime?
  deliveryStop      DateTime?
  deliveryStatus    DeliveryStatus @default(PENDING)
  user              User?          @relation(fields: [userId], references: [id])
  userId            String?
  items             OrderItem[]
  shippingAddressId String
  shippingAddress   Address        @relation(fields: [shippingAddressId], references: [id])
  StkResponse       StkResponse    @relation(fields: [stkResponseId], references: [id])
  stkResponseId     String         @unique
  amountPayable     Int
  amountPaid        Int
  mpesaNumber       String
}

enum DeliveryStatus {
  PENDING
  DISPATCHED
  DELIVERED
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  name      String
  price     Int
  priceType String
  category  String
  image     String
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}

model StkRequest {
  id                  String       @id @default(uuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  MerchantRequestID   String
  CheckoutRequestID   String       @unique
  ResponseCode        Int
  ResponseDescription String
  CustomerMessage     String
  StkResponse         StkResponse?
  amount              Int
  phone               String
  status              Status       @default(PENDING)
  user                User?        @relation(fields: [userId], references: [id])
  userId              String?
  shippingAddress     Address?     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId   String?
  Session             Session      @relation(fields: [sessionId], references: [sessionId])
  sessionId           String
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}

model StkResponse {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  MerchantRequestID String
  CheckoutRequestID String             @unique
  ResultCode        Int
  ResultDesc        String
  CallbackMetadata  CallbackMetaData[]
  StkRequest        StkRequest         @relation(fields: [StkRequestId], references: [id])
  StkRequestId      String             @unique
  Order             Order?
}

model CallbackMetaData {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  value         String
  StkResponse   StkResponse? @relation(fields: [stkResponseId], references: [id])
  stkResponseId String?
}
