datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id         String     @id @default(uuid())
  index      Int        @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String     @unique
  price      Int
  price_type String
  category   String
  stock      Int
  image      String
  users      User[]
  orders     Order[]
  CartItem   CartItem[]
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  session   Session    @relation(fields: [sessionId], references: [sessionId])
  sessionId String     @unique
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?
}

model Session {
  id        String   @id @default(uuid())
  sessionId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  cart      Cart?
  cartId    String?
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(USER)
  email     String    @unique
  image     String?
  favorites Product[]
  addresses Address[]
  orders    Order[]
  cart      Cart?
  session   Session?
}

enum Role {
  USER
  ADMIN
}

model Address {
  id                     String   @id @default(uuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  first_name             String
  last_name              String
  mobile_phone_number    String
  alternate_phone_number String?
  specific_address       String
  is_default             Boolean  @default(false)
  User                   User     @relation(fields: [userId], references: [id])
  userId                 String
  Location               Location @relation(fields: [locationId], references: [id])
  locationId             String
}

model Location {
  id        String    @id @default(uuid())
  index     Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  shipping  Int
  county    String
  town      String
  addresses Address[]
}

model Order {
  id                String        @id @default(uuid())
  index             Int           @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  products          Product[]
  status            PaymentStatus @default(PENDING)
  is_shipped        Boolean       @default(false)
  cart_total        Int
  amount_payable    Int
  shipping_cost     Int
  mpesa_number      String
  User              User?         @relation(fields: [userId], references: [id])
  userId            String?
  payment           Stk?
  checkoutrequestid String        @unique
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Stk {
  id                String             @id @default(uuid())
  index             Int                @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  merchantrequestid String
  checkoutrequestid String             @unique
  resultcode        Int
  resultdesc        String
  callbackmetadata  CallbackMetaData[]
  Order             Order              @relation(fields: [orderId], references: [id])
  orderId           String             @unique
}

model CallbackMetaData {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  value     String
  Stk       Stk?     @relation(fields: [stkId], references: [id])
  stkId     String?
}
